#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 22 12:38:50 2017

@author: Wenbin
"""
import re


#匹配多个字符串

bt = 'bat|bet|bit'                   #正则表达式模式： bat, bet, bit
m = re.match(bt, 'bat')              #'bat'是一个匹配
if m is not None: m.group()

'bat'
m = re.match(bt, 'blt')              #对于'blt'没有匹配
if m is not None: m.group()

m = re.match(bt, 'He bit me!')       #不能匹配字符串
if m is not None: m.group()

m = re.search(bt, 'He bit me')       #通过搜索查重'bit'
if m is not None: m.group()
'bit'

#匹配任何单个字符

anyend = '.end'
m = re.match(anyend, 'bend')        #点号匹配‘b’
if m is not None: m.group()

'bend'
m = re.match(anyend, 'end')         #不匹配任何字符
if m is not None: m.group()

m = re.match(anyend, '\nend')       #除了\n之外的任何字符
if m is not None: m.group()

m = re.search('.end', 'The end.')   # 在搜索中匹配‘ ’
if m is not None: m.group()

' end'

# 下面的实例在正则表达式中搜索一个真正的据点（小数点），而我们通过使用一个反斜线对句点的功能进行转义

patt314 = '3.14'                                   #表示正则表达式的点号
pi_patt = '3\.14'                                  #表示字面量的点号（dec.point）
m       = re.match(pi_patt, '3.14')                #精确匹配
if m is not None: m.group()

'3.14'

m = re.match(patt314, '3014')                      #点号匹配‘0’
if m is not None: m.group()

'3014'

m = re.match(patt314, '3.14')                      #点号匹配‘.’
if m is not None: m.group()

'3.14'

#创建字符集
m= re.match('[cr][23][dp][o2]','c3po')              #匹配'c3po'
if m is not None: m.group()

'c3po'

m= re.match('[cr][23][dp][o2]','c2do')              #匹配'c2do'
if m is not None: m.group()

'c2do'

m = re.match('r2d2|c3po','c2do')                    #不匹配'c2do'
if m is not None: m.group()

m = re.match('r2d2|c3po','r2d2')                    #匹配'r2d2'
if m is not None: m.group()

'r2d2'

#重复，特殊数组以及分组

m= re.match('\w\w\w-\d\d\d', 'abc-123')
if m is not None: m.group()

'abc-123'

m= re.match('\w\w\w-\d\d\d','abc-xyz')
if m is not None: m.group()

m= re.match('(\w\w\w)-(\d\d\d)','abc-123')
m.group()                                           # 完整匹配
'abc-123'

m.group(1)                                          #子组1
'abc'

m.group(2)                                          #子组2
'123'

m.groups()                                          #全部子组
('abc','123')

#匹配字符串的起始和结尾以及单词边界
m = re.search('^The', 'The end.')                   #匹配
if m is not None: m.group()

'The'

m = re.search('^The', 'end. The')                   #不作为起始
if m is not None: m.group()

m = re.search(r'\bthe','bite the dog')              #在边界
if m is not None: m.group()

'the'

m = re.search(r'\bthe','bitethe dog')               #有边界
if m is not None: m.group()

m = re.search(r'\Bthe', 'bitethe dog')              #没有边界
if m is not None: m.group()

'the'

#使用findall()和finditer()查找每一次出现的位置
re.findall('car','car')
['car']

re.findall('car','scary')
['car']

re.findall('car', 'carry the barcardi to the car')
['car','car','car']

s = 'This and That.'
re.findall(r'(th\w+) and (th\w+)', s, re.I)
[('This','That')]

re.finditer(r'(th\w+) and (th\w+)', s, re.I).next().groups()
('This','that')

re.finditer(r'(th\w+) and (th\w+)', s, re.I).next().groups(1)
'This'

re.finditer(r'(th\w+) and (th\w+)', s, re.I).next().groups(2)
'that'

[g.groups() for g in re.finditer(r'(th\w+) and (th\w+)',s, re.I)]
[('This', 'that')]

